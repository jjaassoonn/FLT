import Mathlib.Algebra.Category.ModuleCat.Abelian
import Mathlib.LinearAlgebra.Matrix.FiniteDimensional
import Mathlib.CategoryTheory.Elementwise

open Matrix

open CategoryTheory BigOperators

universe u u' u'' v v' w

local notation "M[" Œπ "," R "]" => Matrix Œπ Œπ R

variable (R: Type u) (S : Type u) (T : Type u'') [Ring R] [Ring S] [Ring T]

variable (Œπ : Type w) [Fintype Œπ] [Inhabited Œπ] [DecidableEq Œπ]

instance (M : Type*) [AddCommGroup M] [Module R M] : Module M[Œπ, R] (Œπ ‚Üí M) where
  smul N v i := ‚àë j : Œπ, N i j ‚Ä¢ v j
  one_smul v := funext fun i => show ‚àë _, _ = _ by simp [one_apply]
  mul_smul N‚ÇÅ N‚ÇÇ v := funext fun i => show ‚àë _, _ = ‚àë _, _ ‚Ä¢ (‚àë _, _) by
    simp_rw [mul_apply, Finset.smul_sum, Finset.sum_smul, MulAction.mul_smul]
    rw [Finset.sum_comm]
  smul_zero v := funext fun i => show ‚àë _, _ = _ by simp
  smul_add N v‚ÇÅ v‚ÇÇ := funext fun i => show ‚àë _, _ = (‚àë _, _) + (‚àë _, _) by
    simp [Finset.sum_add_distrib]
  add_smul N‚ÇÅ N‚ÇÇ v := funext fun i => show ‚àë _, _ = (‚àë _, _) + (‚àë _, _) by
    simp [add_smul, Finset.sum_add_distrib]
  zero_smul v := funext fun i => show ‚àë _, _ = _ by simp

@[simps]
def toModuleCatOverMatrix : ModuleCat R ‚•§ ModuleCat M[Œπ, R] where
  obj M := ModuleCat.of M[Œπ, R] (Œπ ‚Üí M)
  map f :=
  { toFun := fun v i => f $ v i
    map_add' := fun x y => funext fun i => show f (x i + y i) = f (x i) + f (y i) from
      map_add f _ _
    map_smul' := fun m v => funext fun i => show f (‚àë _, _) = ‚àë _, _ by
      simp only [RingHom.id_apply, map_sum, _root_.map_smul] }
  map_id _ := rfl
  map_comp _ _ := rfl

@[simps]
def fromModuleCatOverMatrix.Œ± [Inhabited Œπ] (M : Type*) [AddCommGroup M] [Module M[Œπ, R] M] :
    AddSubgroup M where
  carrier := Set.range ((stdBasisMatrix (default : Œπ) (default : Œπ) (1 : R) : M[Œπ, R]) ‚Ä¢ ¬∑)
  add_mem' := by
    rintro _ _ ‚ü®m, rfl‚ü© ‚ü®n, rfl‚ü©
    exact ‚ü®m + n, by simp‚ü©
  zero_mem' := ‚ü®0, by simp‚ü©
  neg_mem' := by
    rintro _ ‚ü®m, rfl‚ü©
    exact ‚ü®-m, by simp‚ü©

open fromModuleCatOverMatrix

instance fromModuleCatOverMatrix.module_Œ± (M : Type*) [AddCommGroup M] [Module M[Œπ, R] M] :
    Module R <| Œ± R Œπ M where
  smul a x := ‚ü®(stdBasisMatrix default default a : M[Œπ, R]) ‚Ä¢ x.1, by
    obtain ‚ü®y, hy‚ü© := x.2
    simp only [Œ±, AddSubgroup.mem_mk, Set.mem_range]
    refine ‚ü®(stdBasisMatrix default default a : M[Œπ, R]) ‚Ä¢ y, hy ‚ñ∏ ?_‚ü©
    simp only
    rw [‚Üê MulAction.mul_smul, ‚Üê MulAction.mul_smul]
    congr 1
    ext i j
    simp‚ü©
  one_smul := by
    rintro ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
    ext
    change stdBasisMatrix _ _ _ ‚Ä¢ _ = stdBasisMatrix _ _ _ ‚Ä¢ _
    rw [‚Üê MulAction.mul_smul]
    congr 1
    ext i j
    simp
  mul_smul := by
    rintro a a' ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
    ext
    change stdBasisMatrix _ _ _ ‚Ä¢ _ = stdBasisMatrix _ _ _ ‚Ä¢ (stdBasisMatrix _ _ _ ‚Ä¢ _)
    dsimp only [id_eq, eq_mpr_eq_cast, cast_eq]
    rw [‚Üê MulAction.mul_smul, ‚Üê MulAction.mul_smul, ‚Üê MulAction.mul_smul]
    congr 1
    ext i j
    simp
  smul_zero a := by
    ext
    change stdBasisMatrix _ _ _ ‚Ä¢ 0 = 0
    simp
  smul_add := by
    rintro a ‚ü®_, ‚ü®x, rfl‚ü©‚ü© ‚ü®_, ‚ü®y, rfl‚ü©‚ü©
    ext
    change stdBasisMatrix _ _ _ ‚Ä¢ _ = stdBasisMatrix _ _ _ ‚Ä¢ _ + stdBasisMatrix _ _ _ ‚Ä¢ _
    dsimp only [AddSubmonoid.coe_add, AddSubgroup.coe_toAddSubmonoid, Œ±_coe]
    rw [‚Üê MulAction.mul_smul, ‚Üê MulAction.mul_smul, ‚Üê smul_add, ‚Üê smul_add,
      ‚Üê MulAction.mul_smul]
  add_smul := by
    rintro a b ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
    ext
    change stdBasisMatrix _ _ _ ‚Ä¢ _ = stdBasisMatrix _ _ _ ‚Ä¢ _ + stdBasisMatrix _ _ _ ‚Ä¢ _
    dsimp only
    rw [‚Üê MulAction.mul_smul, ‚Üê MulAction.mul_smul, ‚Üê MulAction.mul_smul, ‚Üê add_smul,
      ‚Üê add_mul, ‚Üê stdBasisMatrix_add]
  zero_smul := by
    rintro ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
    ext
    change stdBasisMatrix _ _ _ ‚Ä¢ _ = _
    simp only [stdBasisMatrix_zero, zero_smul, ZeroMemClass.coe_zero]

@[simp]
lemma fromModuleCatOverMatrix.smul_Œ±_coe {M : Type*} [AddCommGroup M] [Module M[Œπ, R] M]
    (x : R) (y : Œ± R Œπ M) : ((x ‚Ä¢ y : Œ± R Œπ M) : M) =
    (stdBasisMatrix default default x : M[Œπ, R]) ‚Ä¢ y.1 := rfl

open fromModuleCatOverMatrix
@[simps]
def fromModuleCatOverMatrix : ModuleCat M[Œπ, R] ‚•§ ModuleCat R where
  obj M := .of _ $ Œ± R Œπ M
  map f :=
    { toFun := fun x => ‚ü®f x.1, by
        simp only [Œ±, AddSubgroup.coe_set_mk, AddSubgroup.mem_mk, Set.mem_range]
        obtain ‚ü®y, hy‚ü© := x.2
        refine ‚ü®f y, ?_‚ü©
        simp only at hy
        rw [‚Üê hy, f.map_smul]‚ü©
      map_add' := by
        rintro ‚ü®_, ‚ü®x, rfl‚ü©‚ü© ‚ü®_, ‚ü®y, rfl‚ü©‚ü©
        refine Subtype.ext ?_
        show f ((stdBasisMatrix _ _ _ ‚Ä¢ x) + (stdBasisMatrix _ _ _ ‚Ä¢ y)) =
          f (stdBasisMatrix _ _ _ ‚Ä¢ x) + f (stdBasisMatrix _ _ _ ‚Ä¢ y)
        rw [map_add]
      map_smul' := by
          rintro r ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
          simp only [RingHom.id_apply, LinearMapClass.map_smul]
          refine Subtype.ext ?_
          show f (_ ‚Ä¢ _) = _ ‚Ä¢ (_ ‚Ä¢ f _)
          simp only [LinearMapClass.map_smul] }
  map_id X := by ext x; exact Subtype.ext rfl
  map_comp f g := by ext x; exact Subtype.ext rfl

example : true := rfl

@[simps]
def matrix.unitIsoHom :
    toModuleCatOverMatrix R Œπ ‚ãô fromModuleCatOverMatrix R Œπ ‚ü∂
    ùü≠ (ModuleCat R) where
  app X :=
    { toFun := fun x => ‚àë i : Œπ, x.1 i
      map_add' := by
        rintro ‚ü®_, ‚ü®x, rfl‚ü©‚ü© ‚ü®_, ‚ü®y, rfl‚ü©‚ü©
        simp only [toModuleCatOverMatrix_obj, AddSubmonoid.coe_add, ‚Üê Finset.sum_add_distrib]
        rfl
      map_smul' := by
        rintro r ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
        simp only [toModuleCatOverMatrix_obj, smul_Œ±_coe, ‚Üê MulAction.mul_smul,
          StdBasisMatrix.mul_same, mul_one, RingHom.id_apply, Finset.smul_sum]
        refine Finset.sum_congr rfl fun i _ => ?_
        rw [fromModuleCatOverMatrix.smul_Œ±_coe, Subtype.coe_mk, ‚Üê MulAction.mul_smul]
        change ‚àë _, _ = r ‚Ä¢ ‚àë _, _
        simp [Finset.smul_sum, stdBasisMatrix] }
  naturality {X Y} f := by
    simp only [Functor.comp_obj, toModuleCatOverMatrix_obj, fromModuleCatOverMatrix_obj,
      Functor.id_obj, Functor.comp_map, Functor.id_map]
    ext ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
    change ‚àë _, _ = f _
    simp only [fromModuleCatOverMatrix_map_apply_coe, LinearMapClass.map_smul, Functor.comp_obj,
      toModuleCatOverMatrix_obj, fromModuleCatOverMatrix_obj, Functor.id_obj, ModuleCat.coe_comp,
      Function.comp_apply]
    change _ = f (‚àë i : Œπ, ‚àë _, _)
    rw [map_sum]
    refine Finset.sum_congr rfl fun i _ => ?_
    rw [map_sum]
    change ‚àë _, _ = _
    refine Finset.sum_congr rfl fun j _ => ?_
    simp only [LinearMapClass.map_smul]
    rw [toModuleCatOverMatrix_map_apply]

example : true := rfl

-- this never finish compile if uncommented
@[simps]
def matrix.unitIsoInv :
    ùü≠ (ModuleCat R) ‚ü∂
    toModuleCatOverMatrix R Œπ ‚ãô fromModuleCatOverMatrix R Œπ  where
  app X :=
    { toFun := fun x => ‚ü®fun i => if i = default then x else 0, by sorry
        -- simp only [toModuleCatOverMatrix_obj, Œ±, AddSubgroup.mem_mk, Set.mem_range]
        -- refine ‚ü®fun _ => x, ?_‚ü©
        -- refine funext fun i => ?_
        -- change ‚àë _, _ = _
        -- simp only [stdBasisMatrix, ite_smul, one_smul, zero_smul]
        -- split_ifs with h
        -- ¬∑ subst h
        --   simp
        -- ¬∑ apply Finset.sum_eq_zero
        --   intro j hj
        --   rw [if_neg]
        --   tauto
          ‚ü©
      map_add' := by
        rintro (x : X) (y : X)
        simp only [Functor.comp_obj, toModuleCatOverMatrix_obj, fromModuleCatOverMatrix_obj,
          Functor.id_obj]
        refine Subtype.ext $ funext fun i => ?_
        simp only [toModuleCatOverMatrix_obj]
        change (if i = default then x + y else 0) =
          (if i = default then x else 0) + (if i = default then y else 0)
        split_ifs with h
        ¬∑ rfl
        ¬∑ rw [add_zero]
      map_smul' := by
        rintro r (x : X)
        simp only [Functor.comp_obj, toModuleCatOverMatrix_obj, fromModuleCatOverMatrix_obj,
          Functor.id_obj, RingHom.id_apply]
        refine Subtype.ext $ funext fun i => ?_
        simp only [toModuleCatOverMatrix_obj]
        change (if i = default then r ‚Ä¢ x else 0) =
          ‚àë j : Œπ, stdBasisMatrix default default r i j ‚Ä¢ (if j = default then x else 0)
        simp only [smul_ite, smul_zero, Finset.sum_ite_eq', Finset.mem_univ, ‚ÜìreduceIte]
        split_ifs with h
        ¬∑ subst h
          simp only [StdBasisMatrix.apply_same]
        ¬∑ rw [StdBasisMatrix.apply_of_row_ne, zero_smul]
          exact Ne.symm h
          }
  naturality {X Y} f := by
    simp only [Functor.id_obj, Functor.comp_obj, toModuleCatOverMatrix_obj,
        fromModuleCatOverMatrix_obj, Functor.id_map, Functor.comp_map]
    ext x
    simp only [Functor.id_obj, Functor.comp_obj, toModuleCatOverMatrix_obj,
      fromModuleCatOverMatrix_obj, ModuleCat.coe_comp, Function.comp_apply]

    refine Subtype.ext $ funext fun i => ?_

    change (if i = default then f x else 0) = _
    rw [fromModuleCatOverMatrix_map_apply_coe, toModuleCatOverMatrix_map_apply]
    change _ = f (if _ then _ else _)
    split_ifs with h
    ¬∑ rfl
    ¬∑ rw [map_zero]

example : true := rfl

@[simps]
def matrix.unitIso :
    toModuleCatOverMatrix R Œπ ‚ãô fromModuleCatOverMatrix R Œπ ‚âÖ
    ùü≠ (ModuleCat R) where
  hom := matrix.unitIsoHom R Œπ
  inv := matrix.unitIsoInv R Œπ
  hom_inv_id := by
    ext X ‚ü®_, ‚ü®x, rfl‚ü©‚ü©
    simp only [Functor.comp_obj, toModuleCatOverMatrix_obj, fromModuleCatOverMatrix_obj,
      NatTrans.comp_app, Functor.id_obj, ModuleCat.coe_comp, Function.comp_apply, NatTrans.id_app,
      ModuleCat.id_apply]
    refine Subtype.ext $ funext fun i => ?_
    simp only [toModuleCatOverMatrix_obj]
    erw [matrix.unitIsoInv_app_apply_coe]
    change _ = ‚àë _, _
    erw [matrix.unitIsoHom_app_apply]
    simp only [Functor.id_obj]
    split_ifs with h
    ¬∑ refine Finset.sum_congr rfl fun i _ => ?_
      change ‚àë _, _ = _
      subst h
      simp only [stdBasisMatrix, ite_smul, one_smul, zero_smul, true_and]
      split_ifs with h
      ¬∑ subst h
        simp only [true_and, Finset.sum_ite_eq, Finset.mem_univ, ‚ÜìreduceIte]
      ¬∑ apply Finset.sum_eq_zero
        intro j _
        rw [if_neg]
        tauto
    ¬∑ symm
      apply Finset.sum_eq_zero
      intro j _
      dsimp only [stdBasisMatrix]
      rw [if_neg, zero_smul]
      tauto
  inv_hom_id := by
    ext X (x : X)
    simp only [Functor.id_obj, NatTrans.comp_app, Functor.comp_obj, toModuleCatOverMatrix_obj,
      fromModuleCatOverMatrix_obj, ModuleCat.coe_comp, Function.comp_apply, NatTrans.id_app,
      ModuleCat.id_apply]
    erw [matrix.unitIsoHom_app_apply]
    change (‚àë i : Œπ, if i = default then x else 0) = x
    simp

example : true := rfl


@[simps?!]
noncomputable def test (M : ModuleCat M[Œπ, R]) :
    M ‚âÖ (fromModuleCatOverMatrix R Œπ ‚ãô toModuleCatOverMatrix R Œπ).obj M :=
  LinearEquiv.toModuleIso $ LinearEquiv.ofBijective
    { toFun := fun m i => ‚ü®(stdBasisMatrix default i 1 : M[Œπ, R]) ‚Ä¢ m, by
        simp only [Œ±, AddSubgroup.mem_mk, Set.mem_range]
        refine ‚ü®(stdBasisMatrix default i 1 : M[Œπ, R]) ‚Ä¢ m, ?_‚ü©
        simp only [‚Üê MulAction.mul_smul, StdBasisMatrix.mul_same, mul_one]‚ü©
      map_add' := fun x y => funext fun i => Subtype.ext $ sorry
        -- show (stdBasisMatrix default i 1 : M[Œπ, R]) ‚Ä¢ (x + y) =
        --   (stdBasisMatrix default i 1 : M[Œπ, R]) ‚Ä¢ x +
        --   (stdBasisMatrix default i 1 : M[Œπ, R]) ‚Ä¢ y from _
      map_smul' := sorry } ‚ü®sorry, sorry‚ü©

@[simps]
noncomputable def matrix.counitIsoHom :
    fromModuleCatOverMatrix R Œπ ‚ãô toModuleCatOverMatrix R Œπ ‚ü∂ ùü≠ (ModuleCat M[Œπ, R]) where
  app M := (test R Œπ M).inv
  naturality X Y f := by
    simp only [Functor.comp_obj, fromModuleCatOverMatrix_obj, toModuleCatOverMatrix_obj,
      Functor.id_obj, Functor.comp_map, Functor.id_map]
    rw [Iso.eq_inv_comp, ‚Üê Category.assoc, Iso.comp_inv_eq]
    ext x
    simp only [ModuleCat.coe_comp, Function.comp_apply]
    refine funext fun i => ?_
    rw [toModuleCatOverMatrix_map_apply]
    refine Subtype.ext ?_
    rw [fromModuleCatOverMatrix_map_apply_coe]
    change _ = _ ‚Ä¢ _
    rw [‚Üê f.map_smul]
    erw [test_hom_apply_coe]

def matrix.counitIso :
    fromModuleCatOverMatrix R Œπ ‚ãô toModuleCatOverMatrix R Œπ ‚âÖ ùü≠ (ModuleCat M[Œπ, R]) where
  hom := matrix.counitIsoHom R Œπ
  inv := _
  hom_inv_id := _
  inv_hom_id := _


def moritaEquivlentToMatrix : ModuleCat R ‚âå ModuleCat M[Œπ, R] where
  functor := toModuleCatOverMatrix R Œπ
  inverse := fromModuleCatOverMatrix R Œπ
  unitIso := matrix.unitIso R Œπ |>.symm
  counitIso := _
  functor_unitIso_comp := _

structure MoritaEquivalent :=
equiv : ModuleCat R ‚âå ModuleCat S

namespace MoritaEquivalent

-- noncomputable def equiv [MoritaEquivalent R S] : ModuleCat R ‚âå ModuleCat S :=
--   (inferInstance : MoritaEquivalent R S) |>.out.some

-- @[refl]
-- lemma refl : MoritaEquivalent R R :=
-- ‚ü®‚ü®CategoryTheory.Equivalence.refl (C := ModuleCat R)‚ü©‚ü©

-- instance : MoritaEquivalent R R := refl R

-- @[symm]
-- lemma symm [MoritaEquivalent.{u, v} R S] : MoritaEquivalent.{u, v} S R where
--   out := ‚ü®equiv R S |>.symm‚ü©

-- @[trans]
-- lemma trans [MoritaEquivalent.{u, v} R S] [MoritaEquivalent.{u, v} S T] :
--     MoritaEquivalent.{u, v} R T where
--   out := ‚ü®(equiv R S).trans $ equiv S T‚ü©

section matrix

end matrix

end MoritaEquivalent
